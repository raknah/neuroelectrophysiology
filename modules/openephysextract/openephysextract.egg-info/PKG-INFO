Metadata-Version: 2.4
Name: openephysextract
Version: 0.1.0
Summary: Tools for extracting and analyzing neuroelectrophysiology data from Open Ephys recordings
Author-email: Your Name <your.email@example.com>
License: Copyright <2024> <Aswinshankar Sivalingam>
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Project-URL: Homepage, https://github.com/yourusername/neuroelectrophysiology
Project-URL: Documentation, https://github.com/yourusername/neuroelectrophysiology#readme
Project-URL: Repository, https://github.com/yourusername/neuroelectrophysiology.git
Project-URL: Issues, https://github.com/yourusername/neuroelectrophysiology/issues
Keywords: neuroscience,electrophysiology,data-analysis,open-ephys,eeg,meg,signal-processing
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Medical Science Apps.
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: numpy>=1.20.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: h5py>=3.0.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: open-ephys-python-tools>=0.1.0
Requires-Dist: tqdm>=4.60.0
Requires-Dist: dill>=0.3.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: torch>=1.10.0
Provides-Extra: interactive
Requires-Dist: dash>=2.0.0; extra == "interactive"
Requires-Dist: plotly>=5.0.0; extra == "interactive"
Requires-Dist: ipywidgets>=7.6.0; extra == "interactive"
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: jupyter; extra == "dev"
Requires-Dist: ipython; extra == "dev"
Provides-Extra: all
Requires-Dist: openephysextract[dev,interactive]; extra == "all"
Dynamic: license-file

# OpenEphys Extract

A Python package for convenient extraction and analysis of OpenEphys data, with a focus on motor-evoked potentials and resting state analysis.

## Features

- **Data Extraction**: Load and handle OpenEphys recording data
- **Preprocessing Pipeline**: Comprehensive preprocessing tools listed below
- **Analysis Tools**: Including bandpower analysis and state-space modeling
- **Utility Functions**: Save/load operations, spreadsheet handling
- **Easy to Use**: Simple API for quick integration into your analysis workflows

Requires Python 3.8 or later.

## Quick Start

```python
from openephysextract import Session, Preprocessor

# Load a session
session = Session(
                session="session_name",
                experiment="experiment_name",
                source="data_path",
                sampling_rate=30000,
                ch_names= [2,4,5,9],
            )

# Create a preprocessing pipeline
preprocessor = Preprocessor([
    "RemoveBadStep",
    "FilterStep",
    "EpochStep"
])

# Process your data
processed_data = preprocessor.run(session)
```
## Resting State Analysis Workflow

Here's a typical workflow for resting state analysis:

1. **Data Extraction** from OpenEphys Recordings
```python
from openephysextract import Extractor

extractor = Extractor(
    source="data_path",
    experiment="experiment_name",
    sampling_rate=30000,
    output="output_path",
    channels=[3, 4, 5, 6, 7, 8]  # Example channels
)

raw_data = extractor.extractify(export=True)
```
2. **Preprocessing Pipeline**
```python
from openephysextract.preprocess import (
    Preprocessor, RemoveBadStep, FilterStep, 
    DownsampleStep, EpochStep
)

steps = [
    RemoveBadStep(std=True, alpha=0.5, beta=0.5, cutoff_pct=90),
    FilterStep(lowcut=0.1, highcut=80, order=4),
    DownsampleStep(target_fs=100),
    EpochStep(frame=100, stride=10)  # 1s epochs with 90% overlap
]

preprocessor = Preprocessor(steps=steps)
preprocessed = preprocessor.preprocess(raw_data)
```
3. **Analysis**

   - Bandpower analysis
   - State-space modeling (e.g., Beta-HMM for dynamical analysis)
   - Statistical comparisons between conditions

## Core Components

### Session
The `Session` class is your entry point for working with OpenEphys data. It handles data loading and provides a consistent interface for the preprocessing pipeline.

### Preprocessor
The `Preprocessor` class manages the preprocessing pipeline. You can chain multiple preprocessing steps together to create your desired workflow.

#### Session Step
You can also use the `SessionStep` to define custom preprocessing steps to a session object, allowing for a more personalised workflow.

```python
class SessionStep(ABC):
    """Abstract preprocessing step for EEG sessions."""
    @abstractmethod
    def apply(self, session: Session, device: torch.device) -> None:
        """Mutate session.raw/preprocessed/data on `device`."""
        ...

    def preferred_device(self, default: torch.device) -> torch.device:
        return default  # override in subclasses as needed
```

### Extractor
The `Extractor` class provides tools for extracting specific data segments and features from your processed sessions.

## Available Preprocessing Steps

- `RemoveBadStep`: Remove bad channels
- `DetrendStep`: Remove signal trends
- `ASRStep`: Artifact Subspace Reconstruction
- `EOGRegressionStep`: EOG artifact regression
- `InterpolateStep`: Channel interpolation
- `EventCompileStep`: Event handling
- `ReReferenceStep`: Signal re-referencing
- `FilterStep`: Signal filtering
- `SurfaceLaplacianStep`: Surface Laplacian transformation
- `EpochStep`: Data epoching
- `ArtifactRejectStep`: Artifact rejection
- `DownsampleStep`: Signal downsampling
- `ICARemovalStep`: ICA-based artifact removal

## Utility Functions

- `savify`: Save processed data
- `loadify`: Load saved data
- `spreadsheet`: Spreadsheet operations
- `bandpower`: Compute signal bandpower

## License

This project is licensed under the MIT License.

## Author

Aswinshankar Sivalingam

## Acknowledgments

This package is built on the foundation of OpenEphys data handling and analysis, leveraging existing libraries and tools for efficient processing and analysis of electrophysiological data. 

I'd also like to thank Dr. Perentos for his guidance and support in understanding the neuroelectrophysiology workflows that led to the development of this package.
```
